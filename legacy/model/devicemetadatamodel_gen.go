// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	deviceMetadataFieldNames          = builder.RawFieldNames(&DeviceMetadata{})
	deviceMetadataRows                = strings.Join(deviceMetadataFieldNames, ",")
	deviceMetadataRowsExpectAutoSet   = strings.Join(stringx.Remove(deviceMetadataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	deviceMetadataRowsWithPlaceHolder = strings.Join(stringx.Remove(deviceMetadataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	deviceMetadataModel interface {
		Insert(ctx context.Context, data *DeviceMetadata) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DeviceMetadata, error)
		FindByDeviceSn(ctx context.Context, deviceSn string) ([]*DeviceMetadata, error)
		FindOneByDeviceSnParamType(ctx context.Context, deviceSn string, paramType int64) (*DeviceMetadata, error)
		Update(ctx context.Context, data *DeviceMetadata) error
		Upsert(ctx context.Context, data []*DeviceMetadata) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDeviceMetadataModel struct {
		conn  sqlx.SqlConn
		table string
	}

	DeviceMetadata struct {
		Id         int64          `db:"id"`
		DeviceSn   string         `db:"device_sn"`   // device sn
		ParamType  int64          `db:"param_type"`  // param type
		ParamValue sql.NullString `db:"param_value"` // param value
		CreateTime time.Time      `db:"create_time"` // create time
		UpdateTime time.Time      `db:"update_time"` // update time
	}
)

func newDeviceMetadataModel(conn sqlx.SqlConn) *defaultDeviceMetadataModel {
	return &defaultDeviceMetadataModel{
		conn:  conn,
		table: "`device_metadata`",
	}
}

func (m *defaultDeviceMetadataModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDeviceMetadataModel) FindOne(ctx context.Context, id int64) (*DeviceMetadata, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", deviceMetadataRows, m.table)
	var resp DeviceMetadata
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeviceMetadataModel) FindByDeviceSn(ctx context.Context, deviceSn string) ([]*DeviceMetadata, error) {
	query := fmt.Sprintf("select %s from %s where `device_sn` = ?", deviceMetadataRows, m.table)
	var resp []*DeviceMetadata
	err := m.conn.QueryRowsCtx(ctx, &resp, query, deviceSn)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeviceMetadataModel) FindOneByDeviceSnParamType(ctx context.Context, deviceSn string, paramType int64) (*DeviceMetadata, error) {
	var resp DeviceMetadata
	query := fmt.Sprintf("select %s from %s where `device_sn` = ? and `param_type` = ? limit 1", deviceMetadataRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, deviceSn, paramType)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeviceMetadataModel) Insert(ctx context.Context, data *DeviceMetadata) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, deviceMetadataRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeviceSn, data.ParamType, data.ParamValue)
	return ret, err
}

func (m *defaultDeviceMetadataModel) Update(ctx context.Context, newData *DeviceMetadata) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, deviceMetadataRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.DeviceSn, newData.ParamType, newData.ParamValue, newData.Id)
	return err
}

func (m *defaultDeviceMetadataModel) Upsert(ctx context.Context, data []*DeviceMetadata) error {
	err := m.conn.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		for _, d := range data {
			query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?) on duplicate key update `param_value` = ?", m.table, deviceMetadataRowsExpectAutoSet)
			_, err := session.Exec(query, d.DeviceSn, d.ParamType, d.ParamValue, d.ParamValue)
			if err != nil {
				return err
			}
		}
		return nil
    })
	return err
}

func (m *defaultDeviceMetadataModel) tableName() string {
	return m.table
}
